>> Object-Relational Mapping (ORM) Support − Django provides a bridge between the data model and the database engine, and supports a large set of database systems including MySQL, Oracle, Postgres, etc. Django also supports NoSQL database through Django-nonrel fork. For now, the only NoSQL databases supported are MongoDB and google app engine.

>> Multilingual Support − Django supports multilingual websites through its built-in internationalization system. So you can develop your website, which would support multiple languages.

>> The developer provides the Model, the view and the template then just maps it to a URL and Django does the magic to serve it to the user.

>> re module is eligible for python



    The pattern − A regexp matching the URL you want to be resolved and map. Everything that can work with the python 're' module is eligible for the pattern (useful when you want to pass parameters via url).

    The python path to the view − Same as when you are importing a module.

    The name − In order to perform URL reversing, you’ll need to use named URL patterns as done in the examples above. Once done, just start the server to access your view via :http://127.0.0.1/hello

>> it is possible to link a URL parameter to the view parameter.
# r'^articles/(?P\d{2})/(?P\d{4})',

>> A variable looks like this: {{variable}}. The template replaces the variable by the variable sent by the view in the third parameter of the render function. 

>> A model is a class that represents table or collection in our DB, and where every attribute of the class is a field of the table or collection.








